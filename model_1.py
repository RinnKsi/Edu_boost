from flask import Flask, request, jsonify, render_template
import numpy as np
import lightgbm as lgb
import joblib
import pandas as pd

app = Flask(__name__)

def load_model():
    try:
        return joblib.load('improved_model.joblib')
    except:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
        np.random.seed(42)
        size = 15000
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        sleep = np.clip(np.random.normal(loc=7.5, scale=1.2, size=size), 4, 10)
        health = np.random.randint(2, 6, size=size)
        stress = np.random.randint(1, 6, size=size)
        mood = np.random.randint(1, 6, size=size)  # –®–∫–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è 1-5
        adhd = np.random.choice([0, 1], size=size, p=[0.85, 0.15])
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        base_productivity = (
            np.sqrt(sleep) * 0.9 + 
            health * 0.7 - 
            np.sqrt(stress) * 1.1 +
            mood * 0.5 +  # –í–∫–ª–∞–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            np.random.normal(1.5, 0.4, size=size)
        )
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        productivity = np.where(
            adhd == 1,
            np.clip(base_productivity * 0.75, 1.5, 4.5),  # –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –°–î–í–ì
            np.clip(base_productivity, 2.0, 7.5)          # –î–∏–∞–ø–∞–∑–æ–Ω –±–µ–∑ –°–î–í–ì
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º DataFrame
        data = {
            'sleep': sleep,
            'health': health,
            'stress': stress,
            'mood': mood,  # –î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
            'adhd': adhd,
            'study': np.clip(np.random.normal(3.5, 1.2, size=size), 1, 6),
            'max_study': np.where(adhd == 1, 4.5, 7.5),
            'free_time': np.clip(np.random.normal(3, 1, size=size), 1, 6),
            'productive_time': productivity
        }
        
        df = pd.DataFrame(data)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
        model = lgb.LGBMRegressor(
            num_leaves=20,
            n_estimators=150,
            learning_rate=0.07,
            min_child_samples=25,
            random_state=42,
            n_jobs=-1,
            reg_alpha=0.1,
            reg_lambda=0.1
        )
        
        model.fit(
            df.drop('productive_time', axis=1),
            df['productive_time'],
            feature_name=['sleep', 'health', 'stress', 'mood', 'adhd', 'study', 'max_study', 'free_time'],
            categorical_feature=['adhd']
        )
        
        joblib.dump(model, 'improved_model.joblib')
        return model

model = load_model()

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    try:
        data = request.get_json()
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–î–í–ì
        has_adhd = data.get('adhd', 0)
        max_limit = 4.5 if has_adhd else min(data.get('max_study', 7.5), 7.5)
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–æ mood)
        input_data = np.array([[
            data.get('sleep', 7),
            data.get('health', 4),
            data.get('stress', 3),
            data.get('mood', 4),  # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            has_adhd,
            data.get('study', 3.5),
            max_limit,
            data.get('free_time', 3)
        ]], dtype=np.float32)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        raw_pred = model.predict(input_data)[0]
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
        if has_adhd:
            adjusted_pred = raw_pred * 0.82  # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –°–î–í–ì
        else:
            adjusted_pred = raw_pred * 0.92  # –ú–µ–Ω—å—à–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
            
        # –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
        final_pred = np.clip(adjusted_pred, 1.5 if has_adhd else 2.0, max_limit)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 0.25 —á–∞—Å–∞ (15 –º–∏–Ω—É—Ç)
        final_pred = round(final_pred * 4) / 4
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è)
        recommendations = []
        sleep = data.get('sleep', 7)
        stress = data.get('stress', 3)
        mood = data.get('mood', 4)
        
        if sleep < 6:
            recommendations.append("üî¥ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Å–Ω–∞! –°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –∫ 7-8 —á–∞—Å–∞–º")
        elif sleep > 9:
            recommendations.append("üü° –ò–∑–±—ã—Ç–æ–∫ —Å–Ω–∞ –º–æ–∂–µ—Ç —Å–Ω–∏–∂–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
            
        if stress > 4:
            recommendations.append("üß† –í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å: –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É 5-5-5 (5 –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤)")
            
        if mood < 3:
            recommendations.append("üòî –ù–∏–∑–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤")
        elif mood > 4:
            recommendations.append("üòä –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏!")
            
        if has_adhd:
            recommendations.append("‚ú® –î–ª—è –°–î–í–ì: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–π–º–µ—Ä Pomodoro (25/5 –º–∏–Ω)")
        
        return jsonify({
            'prediction': float(final_pred),
            'max_recommended': float(max_limit),
            'recommendations': recommendations,
            'status': 'success'
        })
        
    except Exception as e:
        return jsonify({
            'error': str(e),
            'status': 'failed'
        })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, threaded=True)